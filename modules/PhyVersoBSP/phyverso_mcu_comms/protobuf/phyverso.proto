syntax = "proto3";

/*
 This container message is send from EVerest to MCU and may contain any allowed message in that direction.
*/
message EverestToMcu {
 oneof payload {
    KeepAlive keep_alive = 1;
    bool firmware_update = 2;
    bool connector_lock = 3; // false: unlock, true: lock
    uint32 pwm_duty_cycle = 4; // in 0.01 %, 0 = State F, 10000 = X1
    bool allow_power_on = 5;
    bool reset = 6;
  }
  int32 connector = 7; // 0: None, 1: Connector 1, 2: Connector 2
}

/*
 This container message is send from MCU to EVerest and may contain any allowed message in that direction.
*/
message McuToEverest {
 oneof payload {
  KeepAlive keep_alive = 1;
  ResetReason reset = 2;
  CpState cp_state = 3;
  bool relais_state = 4; // false: relais are off, true: relais are on
  ErrorFlags error_flags = 5;
  Telemetry telemetry = 7;
  PpState pp_state = 8;
  FanState fan_state = 9;
  LockState lock_state = 10;
 }
 int32 connector = 6; // 0: None, 1: Connector 1, 2: Connector 2
}

enum CpState {
  STATE_A = 0;
  STATE_B = 1;
  STATE_C = 2;
  STATE_D = 3;
  STATE_E = 4;
  STATE_F = 5;
}

message ErrorFlags {
  bool diode_fault = 1;
  bool rcd_selftest_failed = 2;
  bool rcd_triggered = 3;
  bool ventilation_not_available = 4;
  bool connector_lock_failed = 5;
  bool cp_signal_fault = 6;
}

enum ResetReason {
  USER = 0;
  WATCHDOG = 1;
}

message KeepAlive {
  uint32 time_stamp = 1;
  uint32 hw_type = 2;
  uint32 hw_revision = 3;
  string sw_version_string = 6;
}

message Telemetry {
  uint32 cp_voltage_hi = 1;
  uint32 cp_voltage_lo = 2;
}

enum PpState {
  STATE_NC = 0;
  STATE_13A = 1;
  STATE_20A = 2;
  STATE_32A = 3;
  STATE_70A = 4;
  STATE_FAULT = 5;
}

message FanState {
  uint32 fan_id = 1;
  bool enabled = 2;
  uint32 duty = 3;  // in 0.1%, 1000 = 100%
  uint32 rpm = 4;
}

enum LockState {
  UNDEFINED = 0;
  UNLOCKED = 1;
  LOCKED = 2;
}

// Message for parking sensor data.
message PSensorData {
  // The data itself.
  repeated uint32 data = 1;

  // The id of the message - this allows the receiver to assemble chunks of the
  // same message.
  uint32 id = 2;

  // The total number of chunks belonging to the `id`.
  uint32 chunks_total = 3;

  // The current chunk.
  uint32 chunk_current = 4;

  // The connector or parking sensor.
  int32 connector = 5;
}